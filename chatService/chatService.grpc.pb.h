// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chatService.proto
#ifndef GRPC_chatService_2eproto__INCLUDED
#define GRPC_chatService_2eproto__INCLUDED

#include "chatService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace chatService {

class chatService final {
 public:
  static constexpr char const* service_full_name() {
    return "chatService.chatService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::chatService::createAccountReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::createAccountReply>> AsyncCreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::createAccountReply>>(AsyncCreateAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::createAccountReply>> PrepareAsyncCreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::createAccountReply>>(PrepareAsyncCreateAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::chatService::loginReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::loginReply>> AsyncLogin(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::loginReply>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::loginReply>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::loginReply>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status Logout(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::chatService::logoutReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::logoutReply>> AsyncLogout(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::logoutReply>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::logoutReply>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::logoutReply>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::chatService::user>> ListUsers(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::chatService::user>>(ListUsersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::user>> AsyncListUsers(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::user>>(AsyncListUsersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::user>> PrepareAsyncListUsers(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::user>>(PrepareAsyncListUsersRaw(context, request, cq));
    }
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::chatService::sendMessageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::sendMessageReply>> AsyncSendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::sendMessageReply>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::sendMessageReply>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::sendMessageReply>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::chatService::notification>> QueryNotifications(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::chatService::notification>>(QueryNotificationsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::notification>> AsyncQueryNotifications(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::notification>>(AsyncQueryNotificationsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::notification>> PrepareAsyncQueryNotifications(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::notification>>(PrepareAsyncQueryNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::chatService::chatMessage>> QueryMessages(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::chatService::chatMessage>>(QueryMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::chatMessage>> AsyncQueryMessages(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::chatMessage>>(AsyncQueryMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::chatMessage>> PrepareAsyncQueryMessages(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::chatService::chatMessage>>(PrepareAsyncQueryMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::chatService::deleteAccountReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::deleteAccountReply>> AsyncDeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::deleteAccountReply>>(AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::deleteAccountReply>> PrepareAsyncDeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::deleteAccountReply>>(PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    // May not need this anymore?
    virtual ::grpc::Status MessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::chatService::messagesSeenMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::messagesSeenMessage>> AsyncMessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::messagesSeenMessage>>(AsyncMessagesSeenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::messagesSeenMessage>> PrepareAsyncMessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::messagesSeenMessage>>(PrepareAsyncMessagesSeenRaw(context, request, cq));
    }
    // Server->client
    virtual ::grpc::Status NewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::chatService::newMessageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::newMessageReply>> AsyncNewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::newMessageReply>>(AsyncNewMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::newMessageReply>> PrepareAsyncNewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatService::newMessageReply>>(PrepareAsyncNewMessageRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage* request, ::chatService::createAccountReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage* request, ::chatService::createAccountReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::chatService::loginMessage* request, ::chatService::loginReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::chatService::loginMessage* request, ::chatService::loginReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::chatService::logoutMessage* request, ::chatService::logoutReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::chatService::logoutMessage* request, ::chatService::logoutReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListUsers(::grpc::ClientContext* context, const ::chatService::queryUsersMessage* request, ::grpc::ClientReadReactor< ::chatService::user>* reactor) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::sendMessageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::sendMessageReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryNotifications(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage* request, ::grpc::ClientReadReactor< ::chatService::notification>* reactor) = 0;
      virtual void QueryMessages(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage* request, ::grpc::ClientReadReactor< ::chatService::chatMessage>* reactor) = 0;
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage* request, ::chatService::deleteAccountReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage* request, ::chatService::deleteAccountReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // May not need this anymore?
      virtual void MessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage* request, ::chatService::messagesSeenMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage* request, ::chatService::messagesSeenMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Server->client
      virtual void NewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::newMessageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::newMessageReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::createAccountReply>* AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::createAccountReply>* PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::loginReply>* AsyncLoginRaw(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::loginReply>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::logoutReply>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::logoutReply>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::chatService::user>* ListUsersRaw(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chatService::user>* AsyncListUsersRaw(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chatService::user>* PrepareAsyncListUsersRaw(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::sendMessageReply>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::sendMessageReply>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::chatService::notification>* QueryNotificationsRaw(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chatService::notification>* AsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chatService::notification>* PrepareAsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::chatService::chatMessage>* QueryMessagesRaw(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chatService::chatMessage>* AsyncQueryMessagesRaw(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::chatService::chatMessage>* PrepareAsyncQueryMessagesRaw(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::deleteAccountReply>* AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::deleteAccountReply>* PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::messagesSeenMessage>* AsyncMessagesSeenRaw(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::messagesSeenMessage>* PrepareAsyncMessagesSeenRaw(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::newMessageReply>* AsyncNewMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatService::newMessageReply>* PrepareAsyncNewMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::chatService::createAccountReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::createAccountReply>> AsyncCreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::createAccountReply>>(AsyncCreateAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::createAccountReply>> PrepareAsyncCreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::createAccountReply>>(PrepareAsyncCreateAccountRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::chatService::loginReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::loginReply>> AsyncLogin(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::loginReply>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::loginReply>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::loginReply>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Logout(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::chatService::logoutReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::logoutReply>> AsyncLogout(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::logoutReply>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::logoutReply>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::logoutReply>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::chatService::user>> ListUsers(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::chatService::user>>(ListUsersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::user>> AsyncListUsers(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::user>>(AsyncListUsersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::user>> PrepareAsyncListUsers(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::user>>(PrepareAsyncListUsersRaw(context, request, cq));
    }
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::chatService::sendMessageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::sendMessageReply>> AsyncSendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::sendMessageReply>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::sendMessageReply>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::sendMessageReply>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::chatService::notification>> QueryNotifications(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::chatService::notification>>(QueryNotificationsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::notification>> AsyncQueryNotifications(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::notification>>(AsyncQueryNotificationsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::notification>> PrepareAsyncQueryNotifications(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::notification>>(PrepareAsyncQueryNotificationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::chatService::chatMessage>> QueryMessages(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::chatService::chatMessage>>(QueryMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::chatMessage>> AsyncQueryMessages(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::chatMessage>>(AsyncQueryMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::chatMessage>> PrepareAsyncQueryMessages(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::chatService::chatMessage>>(PrepareAsyncQueryMessagesRaw(context, request, cq));
    }
    ::grpc::Status DeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::chatService::deleteAccountReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::deleteAccountReply>> AsyncDeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::deleteAccountReply>>(AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::deleteAccountReply>> PrepareAsyncDeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::deleteAccountReply>>(PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    ::grpc::Status MessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::chatService::messagesSeenMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::messagesSeenMessage>> AsyncMessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::messagesSeenMessage>>(AsyncMessagesSeenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::messagesSeenMessage>> PrepareAsyncMessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::messagesSeenMessage>>(PrepareAsyncMessagesSeenRaw(context, request, cq));
    }
    ::grpc::Status NewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::chatService::newMessageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::newMessageReply>> AsyncNewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::newMessageReply>>(AsyncNewMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::newMessageReply>> PrepareAsyncNewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatService::newMessageReply>>(PrepareAsyncNewMessageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage* request, ::chatService::createAccountReply* response, std::function<void(::grpc::Status)>) override;
      void CreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage* request, ::chatService::createAccountReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::chatService::loginMessage* request, ::chatService::loginReply* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::chatService::loginMessage* request, ::chatService::loginReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Logout(::grpc::ClientContext* context, const ::chatService::logoutMessage* request, ::chatService::logoutReply* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::chatService::logoutMessage* request, ::chatService::logoutReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListUsers(::grpc::ClientContext* context, const ::chatService::queryUsersMessage* request, ::grpc::ClientReadReactor< ::chatService::user>* reactor) override;
      void SendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::sendMessageReply* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::sendMessageReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryNotifications(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage* request, ::grpc::ClientReadReactor< ::chatService::notification>* reactor) override;
      void QueryMessages(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage* request, ::grpc::ClientReadReactor< ::chatService::chatMessage>* reactor) override;
      void DeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage* request, ::chatService::deleteAccountReply* response, std::function<void(::grpc::Status)>) override;
      void DeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage* request, ::chatService::deleteAccountReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage* request, ::chatService::messagesSeenMessage* response, std::function<void(::grpc::Status)>) override;
      void MessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage* request, ::chatService::messagesSeenMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::newMessageReply* response, std::function<void(::grpc::Status)>) override;
      void NewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::newMessageReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::chatService::createAccountReply>* AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::createAccountReply>* PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::loginReply>* AsyncLoginRaw(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::loginReply>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::logoutReply>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::logoutReply>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::chatService::user>* ListUsersRaw(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request) override;
    ::grpc::ClientAsyncReader< ::chatService::user>* AsyncListUsersRaw(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::chatService::user>* PrepareAsyncListUsersRaw(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::sendMessageReply>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::sendMessageReply>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::chatService::notification>* QueryNotificationsRaw(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request) override;
    ::grpc::ClientAsyncReader< ::chatService::notification>* AsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::chatService::notification>* PrepareAsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::chatService::chatMessage>* QueryMessagesRaw(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request) override;
    ::grpc::ClientAsyncReader< ::chatService::chatMessage>* AsyncQueryMessagesRaw(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::chatService::chatMessage>* PrepareAsyncQueryMessagesRaw(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::deleteAccountReply>* AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::deleteAccountReply>* PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::messagesSeenMessage>* AsyncMessagesSeenRaw(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::messagesSeenMessage>* PrepareAsyncMessagesSeenRaw(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::newMessageReply>* AsyncNewMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chatService::newMessageReply>* PrepareAsyncNewMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Logout_;
    const ::grpc::internal::RpcMethod rpcmethod_ListUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryNotifications_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_MessagesSeen_;
    const ::grpc::internal::RpcMethod rpcmethod_NewMessage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateAccount(::grpc::ServerContext* context, const ::chatService::createAccountMessage* request, ::chatService::createAccountReply* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::chatService::loginMessage* request, ::chatService::loginReply* response);
    virtual ::grpc::Status Logout(::grpc::ServerContext* context, const ::chatService::logoutMessage* request, ::chatService::logoutReply* response);
    virtual ::grpc::Status ListUsers(::grpc::ServerContext* context, const ::chatService::queryUsersMessage* request, ::grpc::ServerWriter< ::chatService::user>* writer);
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::chatService::chatMessage* request, ::chatService::sendMessageReply* response);
    virtual ::grpc::Status QueryNotifications(::grpc::ServerContext* context, const ::chatService::queryNotificationsMessage* request, ::grpc::ServerWriter< ::chatService::notification>* writer);
    virtual ::grpc::Status QueryMessages(::grpc::ServerContext* context, const ::chatService::queryMessagesMessage* request, ::grpc::ServerWriter< ::chatService::chatMessage>* writer);
    virtual ::grpc::Status DeleteAccount(::grpc::ServerContext* context, const ::chatService::deleteAccountMessage* request, ::chatService::deleteAccountReply* response);
    // May not need this anymore?
    virtual ::grpc::Status MessagesSeen(::grpc::ServerContext* context, const ::chatService::messagesSeenMessage* request, ::chatService::messagesSeenMessage* response);
    // Server->client
    virtual ::grpc::Status NewMessage(::grpc::ServerContext* context, const ::chatService::chatMessage* request, ::chatService::newMessageReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::chatService::createAccountMessage* /*request*/, ::chatService::createAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount(::grpc::ServerContext* context, ::chatService::createAccountMessage* request, ::grpc::ServerAsyncResponseWriter< ::chatService::createAccountReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chatService::loginMessage* /*request*/, ::chatService::loginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::chatService::loginMessage* request, ::grpc::ServerAsyncResponseWriter< ::chatService::loginReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Logout() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::chatService::logoutMessage* /*request*/, ::chatService::logoutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::chatService::logoutMessage* request, ::grpc::ServerAsyncResponseWriter< ::chatService::logoutReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListUsers() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::chatService::queryUsersMessage* /*request*/, ::grpc::ServerWriter< ::chatService::user>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUsers(::grpc::ServerContext* context, ::chatService::queryUsersMessage* request, ::grpc::ServerAsyncWriter< ::chatService::user>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::sendMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::chatService::chatMessage* request, ::grpc::ServerAsyncResponseWriter< ::chatService::sendMessageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryNotifications() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::chatService::queryNotificationsMessage* /*request*/, ::grpc::ServerWriter< ::chatService::notification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryNotifications(::grpc::ServerContext* context, ::chatService::queryNotificationsMessage* request, ::grpc::ServerAsyncWriter< ::chatService::notification>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryMessages() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_QueryMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryMessages(::grpc::ServerContext* /*context*/, const ::chatService::queryMessagesMessage* /*request*/, ::grpc::ServerWriter< ::chatService::chatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryMessages(::grpc::ServerContext* context, ::chatService::queryMessagesMessage* request, ::grpc::ServerAsyncWriter< ::chatService::chatMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::chatService::deleteAccountMessage* /*request*/, ::chatService::deleteAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(::grpc::ServerContext* context, ::chatService::deleteAccountMessage* request, ::grpc::ServerAsyncResponseWriter< ::chatService::deleteAccountReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MessagesSeen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MessagesSeen() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_MessagesSeen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MessagesSeen(::grpc::ServerContext* /*context*/, const ::chatService::messagesSeenMessage* /*request*/, ::chatService::messagesSeenMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMessagesSeen(::grpc::ServerContext* context, ::chatService::messagesSeenMessage* request, ::grpc::ServerAsyncResponseWriter< ::chatService::messagesSeenMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewMessage() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_NewMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::newMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewMessage(::grpc::ServerContext* context, ::chatService::chatMessage* request, ::grpc::ServerAsyncResponseWriter< ::chatService::newMessageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateAccount<WithAsyncMethod_Login<WithAsyncMethod_Logout<WithAsyncMethod_ListUsers<WithAsyncMethod_SendMessage<WithAsyncMethod_QueryNotifications<WithAsyncMethod_QueryMessages<WithAsyncMethod_DeleteAccount<WithAsyncMethod_MessagesSeen<WithAsyncMethod_NewMessage<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAccount() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::chatService::createAccountMessage, ::chatService::createAccountReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chatService::createAccountMessage* request, ::chatService::createAccountReply* response) { return this->CreateAccount(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAccount(
        ::grpc::MessageAllocator< ::chatService::createAccountMessage, ::chatService::createAccountReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chatService::createAccountMessage, ::chatService::createAccountReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::chatService::createAccountMessage* /*request*/, ::chatService::createAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::chatService::createAccountMessage* /*request*/, ::chatService::createAccountReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::chatService::loginMessage, ::chatService::loginReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chatService::loginMessage* request, ::chatService::loginReply* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::chatService::loginMessage, ::chatService::loginReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chatService::loginMessage, ::chatService::loginReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chatService::loginMessage* /*request*/, ::chatService::loginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::chatService::loginMessage* /*request*/, ::chatService::loginReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Logout() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::chatService::logoutMessage, ::chatService::logoutReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chatService::logoutMessage* request, ::chatService::logoutReply* response) { return this->Logout(context, request, response); }));}
    void SetMessageAllocatorFor_Logout(
        ::grpc::MessageAllocator< ::chatService::logoutMessage, ::chatService::logoutReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chatService::logoutMessage, ::chatService::logoutReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::chatService::logoutMessage* /*request*/, ::chatService::logoutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::chatService::logoutMessage* /*request*/, ::chatService::logoutReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListUsers() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::chatService::queryUsersMessage, ::chatService::user>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chatService::queryUsersMessage* request) { return this->ListUsers(context, request); }));
    }
    ~WithCallbackMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::chatService::queryUsersMessage* /*request*/, ::grpc::ServerWriter< ::chatService::user>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::chatService::user>* ListUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::chatService::queryUsersMessage* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::chatService::chatMessage, ::chatService::sendMessageReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chatService::chatMessage* request, ::chatService::sendMessageReply* response) { return this->SendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::MessageAllocator< ::chatService::chatMessage, ::chatService::sendMessageReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chatService::chatMessage, ::chatService::sendMessageReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::sendMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::sendMessageReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryNotifications() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::chatService::queryNotificationsMessage, ::chatService::notification>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chatService::queryNotificationsMessage* request) { return this->QueryNotifications(context, request); }));
    }
    ~WithCallbackMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::chatService::queryNotificationsMessage* /*request*/, ::grpc::ServerWriter< ::chatService::notification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::chatService::notification>* QueryNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::chatService::queryNotificationsMessage* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryMessages() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::chatService::queryMessagesMessage, ::chatService::chatMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chatService::queryMessagesMessage* request) { return this->QueryMessages(context, request); }));
    }
    ~WithCallbackMethod_QueryMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryMessages(::grpc::ServerContext* /*context*/, const ::chatService::queryMessagesMessage* /*request*/, ::grpc::ServerWriter< ::chatService::chatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::chatService::chatMessage>* QueryMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::chatService::queryMessagesMessage* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::chatService::deleteAccountMessage, ::chatService::deleteAccountReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chatService::deleteAccountMessage* request, ::chatService::deleteAccountReply* response) { return this->DeleteAccount(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAccount(
        ::grpc::MessageAllocator< ::chatService::deleteAccountMessage, ::chatService::deleteAccountReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chatService::deleteAccountMessage, ::chatService::deleteAccountReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::chatService::deleteAccountMessage* /*request*/, ::chatService::deleteAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::chatService::deleteAccountMessage* /*request*/, ::chatService::deleteAccountReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MessagesSeen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MessagesSeen() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::chatService::messagesSeenMessage, ::chatService::messagesSeenMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chatService::messagesSeenMessage* request, ::chatService::messagesSeenMessage* response) { return this->MessagesSeen(context, request, response); }));}
    void SetMessageAllocatorFor_MessagesSeen(
        ::grpc::MessageAllocator< ::chatService::messagesSeenMessage, ::chatService::messagesSeenMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chatService::messagesSeenMessage, ::chatService::messagesSeenMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MessagesSeen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MessagesSeen(::grpc::ServerContext* /*context*/, const ::chatService::messagesSeenMessage* /*request*/, ::chatService::messagesSeenMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MessagesSeen(
      ::grpc::CallbackServerContext* /*context*/, const ::chatService::messagesSeenMessage* /*request*/, ::chatService::messagesSeenMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewMessage() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::chatService::chatMessage, ::chatService::newMessageReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chatService::chatMessage* request, ::chatService::newMessageReply* response) { return this->NewMessage(context, request, response); }));}
    void SetMessageAllocatorFor_NewMessage(
        ::grpc::MessageAllocator< ::chatService::chatMessage, ::chatService::newMessageReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chatService::chatMessage, ::chatService::newMessageReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::newMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::newMessageReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateAccount<WithCallbackMethod_Login<WithCallbackMethod_Logout<WithCallbackMethod_ListUsers<WithCallbackMethod_SendMessage<WithCallbackMethod_QueryNotifications<WithCallbackMethod_QueryMessages<WithCallbackMethod_DeleteAccount<WithCallbackMethod_MessagesSeen<WithCallbackMethod_NewMessage<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::chatService::createAccountMessage* /*request*/, ::chatService::createAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chatService::loginMessage* /*request*/, ::chatService::loginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Logout() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::chatService::logoutMessage* /*request*/, ::chatService::logoutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListUsers() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::chatService::queryUsersMessage* /*request*/, ::grpc::ServerWriter< ::chatService::user>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::sendMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryNotifications() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::chatService::queryNotificationsMessage* /*request*/, ::grpc::ServerWriter< ::chatService::notification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryMessages() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_QueryMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryMessages(::grpc::ServerContext* /*context*/, const ::chatService::queryMessagesMessage* /*request*/, ::grpc::ServerWriter< ::chatService::chatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::chatService::deleteAccountMessage* /*request*/, ::chatService::deleteAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MessagesSeen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MessagesSeen() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_MessagesSeen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MessagesSeen(::grpc::ServerContext* /*context*/, const ::chatService::messagesSeenMessage* /*request*/, ::chatService::messagesSeenMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewMessage() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_NewMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::newMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAccount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::chatService::createAccountMessage* /*request*/, ::chatService::createAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chatService::loginMessage* /*request*/, ::chatService::loginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Logout() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::chatService::logoutMessage* /*request*/, ::chatService::logoutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListUsers() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::chatService::queryUsersMessage* /*request*/, ::grpc::ServerWriter< ::chatService::user>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::sendMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryNotifications() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::chatService::queryNotificationsMessage* /*request*/, ::grpc::ServerWriter< ::chatService::notification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryNotifications(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryMessages() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_QueryMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryMessages(::grpc::ServerContext* /*context*/, const ::chatService::queryMessagesMessage* /*request*/, ::grpc::ServerWriter< ::chatService::chatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::chatService::deleteAccountMessage* /*request*/, ::chatService::deleteAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MessagesSeen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MessagesSeen() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_MessagesSeen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MessagesSeen(::grpc::ServerContext* /*context*/, const ::chatService::messagesSeenMessage* /*request*/, ::chatService::messagesSeenMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMessagesSeen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewMessage() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_NewMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::newMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAccount() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::chatService::createAccountMessage* /*request*/, ::chatService::createAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chatService::loginMessage* /*request*/, ::chatService::loginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Logout() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Logout(context, request, response); }));
    }
    ~WithRawCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::chatService::logoutMessage* /*request*/, ::chatService::logoutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListUsers() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ListUsers(context, request); }));
    }
    ~WithRawCallbackMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::chatService::queryUsersMessage* /*request*/, ::grpc::ServerWriter< ::chatService::user>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ListUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::sendMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryNotifications() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->QueryNotifications(context, request); }));
    }
    ~WithRawCallbackMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::chatService::queryNotificationsMessage* /*request*/, ::grpc::ServerWriter< ::chatService::notification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* QueryNotifications(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryMessages() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->QueryMessages(context, request); }));
    }
    ~WithRawCallbackMethod_QueryMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryMessages(::grpc::ServerContext* /*context*/, const ::chatService::queryMessagesMessage* /*request*/, ::grpc::ServerWriter< ::chatService::chatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* QueryMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::chatService::deleteAccountMessage* /*request*/, ::chatService::deleteAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MessagesSeen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MessagesSeen() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MessagesSeen(context, request, response); }));
    }
    ~WithRawCallbackMethod_MessagesSeen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MessagesSeen(::grpc::ServerContext* /*context*/, const ::chatService::messagesSeenMessage* /*request*/, ::chatService::messagesSeenMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MessagesSeen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewMessage() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::newMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chatService::createAccountMessage, ::chatService::createAccountReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chatService::createAccountMessage, ::chatService::createAccountReply>* streamer) {
                       return this->StreamedCreateAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::chatService::createAccountMessage* /*request*/, ::chatService::createAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatService::createAccountMessage,::chatService::createAccountReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chatService::loginMessage, ::chatService::loginReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chatService::loginMessage, ::chatService::loginReply>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::chatService::loginMessage* /*request*/, ::chatService::loginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatService::loginMessage,::chatService::loginReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Logout() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chatService::logoutMessage, ::chatService::logoutReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chatService::logoutMessage, ::chatService::logoutReply>* streamer) {
                       return this->StreamedLogout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::chatService::logoutMessage* /*request*/, ::chatService::logoutReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatService::logoutMessage,::chatService::logoutReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chatService::chatMessage, ::chatService::sendMessageReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chatService::chatMessage, ::chatService::sendMessageReply>* streamer) {
                       return this->StreamedSendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::sendMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatService::chatMessage,::chatService::sendMessageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chatService::deleteAccountMessage, ::chatService::deleteAccountReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chatService::deleteAccountMessage, ::chatService::deleteAccountReply>* streamer) {
                       return this->StreamedDeleteAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::chatService::deleteAccountMessage* /*request*/, ::chatService::deleteAccountReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatService::deleteAccountMessage,::chatService::deleteAccountReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MessagesSeen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MessagesSeen() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chatService::messagesSeenMessage, ::chatService::messagesSeenMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chatService::messagesSeenMessage, ::chatService::messagesSeenMessage>* streamer) {
                       return this->StreamedMessagesSeen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MessagesSeen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MessagesSeen(::grpc::ServerContext* /*context*/, const ::chatService::messagesSeenMessage* /*request*/, ::chatService::messagesSeenMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMessagesSeen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatService::messagesSeenMessage,::chatService::messagesSeenMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewMessage() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chatService::chatMessage, ::chatService::newMessageReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chatService::chatMessage, ::chatService::newMessageReply>* streamer) {
                       return this->StreamedNewMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewMessage(::grpc::ServerContext* /*context*/, const ::chatService::chatMessage* /*request*/, ::chatService::newMessageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chatService::chatMessage,::chatService::newMessageReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateAccount<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_DeleteAccount<WithStreamedUnaryMethod_MessagesSeen<WithStreamedUnaryMethod_NewMessage<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListUsers() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::chatService::queryUsersMessage, ::chatService::user>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::chatService::queryUsersMessage, ::chatService::user>* streamer) {
                       return this->StreamedListUsers(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ListUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListUsers(::grpc::ServerContext* /*context*/, const ::chatService::queryUsersMessage* /*request*/, ::grpc::ServerWriter< ::chatService::user>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListUsers(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::chatService::queryUsersMessage,::chatService::user>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_QueryNotifications : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_QueryNotifications() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::chatService::queryNotificationsMessage, ::chatService::notification>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::chatService::queryNotificationsMessage, ::chatService::notification>* streamer) {
                       return this->StreamedQueryNotifications(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_QueryNotifications() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryNotifications(::grpc::ServerContext* /*context*/, const ::chatService::queryNotificationsMessage* /*request*/, ::grpc::ServerWriter< ::chatService::notification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedQueryNotifications(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::chatService::queryNotificationsMessage,::chatService::notification>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_QueryMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_QueryMessages() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::chatService::queryMessagesMessage, ::chatService::chatMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::chatService::queryMessagesMessage, ::chatService::chatMessage>* streamer) {
                       return this->StreamedQueryMessages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_QueryMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryMessages(::grpc::ServerContext* /*context*/, const ::chatService::queryMessagesMessage* /*request*/, ::grpc::ServerWriter< ::chatService::chatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedQueryMessages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::chatService::queryMessagesMessage,::chatService::chatMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListUsers<WithSplitStreamingMethod_QueryNotifications<WithSplitStreamingMethod_QueryMessages<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateAccount<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithSplitStreamingMethod_ListUsers<WithStreamedUnaryMethod_SendMessage<WithSplitStreamingMethod_QueryNotifications<WithSplitStreamingMethod_QueryMessages<WithStreamedUnaryMethod_DeleteAccount<WithStreamedUnaryMethod_MessagesSeen<WithStreamedUnaryMethod_NewMessage<Service > > > > > > > > > > StreamedService;
};

}  // namespace chatService


#endif  // GRPC_chatService_2eproto__INCLUDED
