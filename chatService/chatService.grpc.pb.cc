// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chatService.proto

#include "chatService.pb.h"
#include "chatService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace chatService {

static const char* chatService_method_names[] = {
  "/chatService.chatService/CreateAccount",
  "/chatService.chatService/Login",
  "/chatService.chatService/Logout",
  "/chatService.chatService/ListUsers",
  "/chatService.chatService/SendMessage",
  "/chatService.chatService/QueryNotifications",
  "/chatService.chatService/QueryMessages",
  "/chatService.chatService/DeleteAccount",
  "/chatService.chatService/MessagesSeen",
  "/chatService.chatService/NewMessage",
};

std::unique_ptr< chatService::Stub> chatService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< chatService::Stub> stub(new chatService::Stub(channel, options));
  return stub;
}

chatService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateAccount_(chatService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(chatService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(chatService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUsers_(chatService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendMessage_(chatService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryNotifications_(chatService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_QueryMessages_(chatService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteAccount_(chatService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MessagesSeen_(chatService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewMessage_(chatService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status chatService::Stub::CreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::chatService::createAccountReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatService::createAccountMessage, ::chatService::createAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAccount_, context, request, response);
}

void chatService::Stub::async::CreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage* request, ::chatService::createAccountReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatService::createAccountMessage, ::chatService::createAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, std::move(f));
}

void chatService::Stub::async::CreateAccount(::grpc::ClientContext* context, const ::chatService::createAccountMessage* request, ::chatService::createAccountReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatService::createAccountReply>* chatService::Stub::PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatService::createAccountReply, ::chatService::createAccountMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatService::createAccountReply>* chatService::Stub::AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::chatService::createAccountMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status chatService::Stub::Login(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::chatService::loginReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatService::loginMessage, ::chatService::loginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void chatService::Stub::async::Login(::grpc::ClientContext* context, const ::chatService::loginMessage* request, ::chatService::loginReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatService::loginMessage, ::chatService::loginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void chatService::Stub::async::Login(::grpc::ClientContext* context, const ::chatService::loginMessage* request, ::chatService::loginReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatService::loginReply>* chatService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatService::loginReply, ::chatService::loginMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatService::loginReply>* chatService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::chatService::loginMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status chatService::Stub::Logout(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::chatService::logoutReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatService::logoutMessage, ::chatService::logoutReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void chatService::Stub::async::Logout(::grpc::ClientContext* context, const ::chatService::logoutMessage* request, ::chatService::logoutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatService::logoutMessage, ::chatService::logoutReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void chatService::Stub::async::Logout(::grpc::ClientContext* context, const ::chatService::logoutMessage* request, ::chatService::logoutReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatService::logoutReply>* chatService::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatService::logoutReply, ::chatService::logoutMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatService::logoutReply>* chatService::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::chatService::logoutMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::chatService::user>* chatService::Stub::ListUsersRaw(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::chatService::user>::Create(channel_.get(), rpcmethod_ListUsers_, context, request);
}

void chatService::Stub::async::ListUsers(::grpc::ClientContext* context, const ::chatService::queryUsersMessage* request, ::grpc::ClientReadReactor< ::chatService::user>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::chatService::user>::Create(stub_->channel_.get(), stub_->rpcmethod_ListUsers_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::chatService::user>* chatService::Stub::AsyncListUsersRaw(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatService::user>::Create(channel_.get(), cq, rpcmethod_ListUsers_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::chatService::user>* chatService::Stub::PrepareAsyncListUsersRaw(::grpc::ClientContext* context, const ::chatService::queryUsersMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatService::user>::Create(channel_.get(), cq, rpcmethod_ListUsers_, context, request, false, nullptr);
}

::grpc::Status chatService::Stub::SendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::chatService::sendMessageReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatService::chatMessage, ::chatService::sendMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void chatService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::sendMessageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatService::chatMessage, ::chatService::sendMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void chatService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::sendMessageReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatService::sendMessageReply>* chatService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatService::sendMessageReply, ::chatService::chatMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatService::sendMessageReply>* chatService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::chatService::notification>* chatService::Stub::QueryNotificationsRaw(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::chatService::notification>::Create(channel_.get(), rpcmethod_QueryNotifications_, context, request);
}

void chatService::Stub::async::QueryNotifications(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage* request, ::grpc::ClientReadReactor< ::chatService::notification>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::chatService::notification>::Create(stub_->channel_.get(), stub_->rpcmethod_QueryNotifications_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::chatService::notification>* chatService::Stub::AsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatService::notification>::Create(channel_.get(), cq, rpcmethod_QueryNotifications_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::chatService::notification>* chatService::Stub::PrepareAsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::chatService::queryNotificationsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatService::notification>::Create(channel_.get(), cq, rpcmethod_QueryNotifications_, context, request, false, nullptr);
}

::grpc::ClientReader< ::chatService::chatMessage>* chatService::Stub::QueryMessagesRaw(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::chatService::chatMessage>::Create(channel_.get(), rpcmethod_QueryMessages_, context, request);
}

void chatService::Stub::async::QueryMessages(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage* request, ::grpc::ClientReadReactor< ::chatService::chatMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::chatService::chatMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_QueryMessages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::chatService::chatMessage>* chatService::Stub::AsyncQueryMessagesRaw(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatService::chatMessage>::Create(channel_.get(), cq, rpcmethod_QueryMessages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::chatService::chatMessage>* chatService::Stub::PrepareAsyncQueryMessagesRaw(::grpc::ClientContext* context, const ::chatService::queryMessagesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatService::chatMessage>::Create(channel_.get(), cq, rpcmethod_QueryMessages_, context, request, false, nullptr);
}

::grpc::Status chatService::Stub::DeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::chatService::deleteAccountReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatService::deleteAccountMessage, ::chatService::deleteAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAccount_, context, request, response);
}

void chatService::Stub::async::DeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage* request, ::chatService::deleteAccountReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatService::deleteAccountMessage, ::chatService::deleteAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, std::move(f));
}

void chatService::Stub::async::DeleteAccount(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage* request, ::chatService::deleteAccountReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatService::deleteAccountReply>* chatService::Stub::PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatService::deleteAccountReply, ::chatService::deleteAccountMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatService::deleteAccountReply>* chatService::Stub::AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::chatService::deleteAccountMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status chatService::Stub::MessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::chatService::messagesSeenMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatService::messagesSeenMessage, ::chatService::messagesSeenMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MessagesSeen_, context, request, response);
}

void chatService::Stub::async::MessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage* request, ::chatService::messagesSeenMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatService::messagesSeenMessage, ::chatService::messagesSeenMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MessagesSeen_, context, request, response, std::move(f));
}

void chatService::Stub::async::MessagesSeen(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage* request, ::chatService::messagesSeenMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MessagesSeen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatService::messagesSeenMessage>* chatService::Stub::PrepareAsyncMessagesSeenRaw(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatService::messagesSeenMessage, ::chatService::messagesSeenMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MessagesSeen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatService::messagesSeenMessage>* chatService::Stub::AsyncMessagesSeenRaw(::grpc::ClientContext* context, const ::chatService::messagesSeenMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMessagesSeenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status chatService::Stub::NewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::chatService::newMessageReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatService::chatMessage, ::chatService::newMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewMessage_, context, request, response);
}

void chatService::Stub::async::NewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::newMessageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatService::chatMessage, ::chatService::newMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewMessage_, context, request, response, std::move(f));
}

void chatService::Stub::async::NewMessage(::grpc::ClientContext* context, const ::chatService::chatMessage* request, ::chatService::newMessageReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatService::newMessageReply>* chatService::Stub::PrepareAsyncNewMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatService::newMessageReply, ::chatService::chatMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatService::newMessageReply>* chatService::Stub::AsyncNewMessageRaw(::grpc::ClientContext* context, const ::chatService::chatMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

chatService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      chatService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< chatService::Service, ::chatService::createAccountMessage, ::chatService::createAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](chatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatService::createAccountMessage* req,
             ::chatService::createAccountReply* resp) {
               return service->CreateAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      chatService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< chatService::Service, ::chatService::loginMessage, ::chatService::loginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](chatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatService::loginMessage* req,
             ::chatService::loginReply* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      chatService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< chatService::Service, ::chatService::logoutMessage, ::chatService::logoutReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](chatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatService::logoutMessage* req,
             ::chatService::logoutReply* resp) {
               return service->Logout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      chatService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< chatService::Service, ::chatService::queryUsersMessage, ::chatService::user>(
          [](chatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatService::queryUsersMessage* req,
             ::grpc::ServerWriter<::chatService::user>* writer) {
               return service->ListUsers(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      chatService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< chatService::Service, ::chatService::chatMessage, ::chatService::sendMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](chatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatService::chatMessage* req,
             ::chatService::sendMessageReply* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      chatService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< chatService::Service, ::chatService::queryNotificationsMessage, ::chatService::notification>(
          [](chatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatService::queryNotificationsMessage* req,
             ::grpc::ServerWriter<::chatService::notification>* writer) {
               return service->QueryNotifications(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      chatService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< chatService::Service, ::chatService::queryMessagesMessage, ::chatService::chatMessage>(
          [](chatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatService::queryMessagesMessage* req,
             ::grpc::ServerWriter<::chatService::chatMessage>* writer) {
               return service->QueryMessages(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      chatService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< chatService::Service, ::chatService::deleteAccountMessage, ::chatService::deleteAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](chatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatService::deleteAccountMessage* req,
             ::chatService::deleteAccountReply* resp) {
               return service->DeleteAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      chatService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< chatService::Service, ::chatService::messagesSeenMessage, ::chatService::messagesSeenMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](chatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatService::messagesSeenMessage* req,
             ::chatService::messagesSeenMessage* resp) {
               return service->MessagesSeen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      chatService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< chatService::Service, ::chatService::chatMessage, ::chatService::newMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](chatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatService::chatMessage* req,
             ::chatService::newMessageReply* resp) {
               return service->NewMessage(ctx, req, resp);
             }, this)));
}

chatService::Service::~Service() {
}

::grpc::Status chatService::Service::CreateAccount(::grpc::ServerContext* context, const ::chatService::createAccountMessage* request, ::chatService::createAccountReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status chatService::Service::Login(::grpc::ServerContext* context, const ::chatService::loginMessage* request, ::chatService::loginReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status chatService::Service::Logout(::grpc::ServerContext* context, const ::chatService::logoutMessage* request, ::chatService::logoutReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status chatService::Service::ListUsers(::grpc::ServerContext* context, const ::chatService::queryUsersMessage* request, ::grpc::ServerWriter< ::chatService::user>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status chatService::Service::SendMessage(::grpc::ServerContext* context, const ::chatService::chatMessage* request, ::chatService::sendMessageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status chatService::Service::QueryNotifications(::grpc::ServerContext* context, const ::chatService::queryNotificationsMessage* request, ::grpc::ServerWriter< ::chatService::notification>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status chatService::Service::QueryMessages(::grpc::ServerContext* context, const ::chatService::queryMessagesMessage* request, ::grpc::ServerWriter< ::chatService::chatMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status chatService::Service::DeleteAccount(::grpc::ServerContext* context, const ::chatService::deleteAccountMessage* request, ::chatService::deleteAccountReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status chatService::Service::MessagesSeen(::grpc::ServerContext* context, const ::chatService::messagesSeenMessage* request, ::chatService::messagesSeenMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status chatService::Service::NewMessage(::grpc::ServerContext* context, const ::chatService::chatMessage* request, ::chatService::newMessageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chatService

