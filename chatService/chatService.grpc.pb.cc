// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chatService.proto

#include "chatService.pb.h"
#include "chatService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace chatservice {

static const char* ChatService_method_names[] = {
  "/chatservice.ChatService/CreateAccount",
  "/chatservice.ChatService/Login",
  "/chatservice.ChatService/Logout",
  "/chatservice.ChatService/ListUsers",
  "/chatservice.ChatService/SendMessage",
  "/chatservice.ChatService/QueryNotifications",
  "/chatservice.ChatService/QueryMessages",
  "/chatservice.ChatService/DeleteAccount",
  "/chatservice.ChatService/MessagesSeen",
  "/chatservice.ChatService/NewMessage",
};

std::unique_ptr< ChatService::Stub> ChatService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChatService::Stub> stub(new ChatService::Stub(channel, options));
  return stub;
}

ChatService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateAccount_(ChatService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(ChatService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(ChatService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUsers_(ChatService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendMessage_(ChatService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryNotifications_(ChatService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_QueryMessages_(ChatService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteAccount_(ChatService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MessagesSeen_(ChatService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewMessage_(ChatService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChatService::Stub::CreateAccount(::grpc::ClientContext* context, const ::chatservice::CreateAccountMessage& request, ::chatservice::CreateAccountReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatservice::CreateAccountMessage, ::chatservice::CreateAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAccount_, context, request, response);
}

void ChatService::Stub::async::CreateAccount(::grpc::ClientContext* context, const ::chatservice::CreateAccountMessage* request, ::chatservice::CreateAccountReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatservice::CreateAccountMessage, ::chatservice::CreateAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, std::move(f));
}

void ChatService::Stub::async::CreateAccount(::grpc::ClientContext* context, const ::chatservice::CreateAccountMessage* request, ::chatservice::CreateAccountReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatservice::CreateAccountReply>* ChatService::Stub::PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::chatservice::CreateAccountMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatservice::CreateAccountReply, ::chatservice::CreateAccountMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatservice::CreateAccountReply>* ChatService::Stub::AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::chatservice::CreateAccountMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::Login(::grpc::ClientContext* context, const ::chatservice::LoginMessage& request, ::chatservice::LoginReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatservice::LoginMessage, ::chatservice::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void ChatService::Stub::async::Login(::grpc::ClientContext* context, const ::chatservice::LoginMessage* request, ::chatservice::LoginReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatservice::LoginMessage, ::chatservice::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void ChatService::Stub::async::Login(::grpc::ClientContext* context, const ::chatservice::LoginMessage* request, ::chatservice::LoginReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatservice::LoginReply>* ChatService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::chatservice::LoginMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatservice::LoginReply, ::chatservice::LoginMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatservice::LoginReply>* ChatService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::chatservice::LoginMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::Logout(::grpc::ClientContext* context, const ::chatservice::LogoutMessage& request, ::chatservice::LogoutReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatservice::LogoutMessage, ::chatservice::LogoutReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void ChatService::Stub::async::Logout(::grpc::ClientContext* context, const ::chatservice::LogoutMessage* request, ::chatservice::LogoutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatservice::LogoutMessage, ::chatservice::LogoutReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void ChatService::Stub::async::Logout(::grpc::ClientContext* context, const ::chatservice::LogoutMessage* request, ::chatservice::LogoutReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatservice::LogoutReply>* ChatService::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::chatservice::LogoutMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatservice::LogoutReply, ::chatservice::LogoutMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatservice::LogoutReply>* ChatService::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::chatservice::LogoutMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::chatservice::User>* ChatService::Stub::ListUsersRaw(::grpc::ClientContext* context, const ::chatservice::QueryUsersMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::chatservice::User>::Create(channel_.get(), rpcmethod_ListUsers_, context, request);
}

void ChatService::Stub::async::ListUsers(::grpc::ClientContext* context, const ::chatservice::QueryUsersMessage* request, ::grpc::ClientReadReactor< ::chatservice::User>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::chatservice::User>::Create(stub_->channel_.get(), stub_->rpcmethod_ListUsers_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::chatservice::User>* ChatService::Stub::AsyncListUsersRaw(::grpc::ClientContext* context, const ::chatservice::QueryUsersMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatservice::User>::Create(channel_.get(), cq, rpcmethod_ListUsers_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::chatservice::User>* ChatService::Stub::PrepareAsyncListUsersRaw(::grpc::ClientContext* context, const ::chatservice::QueryUsersMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatservice::User>::Create(channel_.get(), cq, rpcmethod_ListUsers_, context, request, false, nullptr);
}

::grpc::Status ChatService::Stub::SendMessage(::grpc::ClientContext* context, const ::chatservice::ChatMessage& request, ::chatservice::SendMessageReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatservice::ChatMessage, ::chatservice::SendMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void ChatService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::chatservice::ChatMessage* request, ::chatservice::SendMessageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatservice::ChatMessage, ::chatservice::SendMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void ChatService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::chatservice::ChatMessage* request, ::chatservice::SendMessageReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatservice::SendMessageReply>* ChatService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::chatservice::ChatMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatservice::SendMessageReply, ::chatservice::ChatMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatservice::SendMessageReply>* ChatService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::chatservice::ChatMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::chatservice::Notification>* ChatService::Stub::QueryNotificationsRaw(::grpc::ClientContext* context, const ::chatservice::QueryNotificationsMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::chatservice::Notification>::Create(channel_.get(), rpcmethod_QueryNotifications_, context, request);
}

void ChatService::Stub::async::QueryNotifications(::grpc::ClientContext* context, const ::chatservice::QueryNotificationsMessage* request, ::grpc::ClientReadReactor< ::chatservice::Notification>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::chatservice::Notification>::Create(stub_->channel_.get(), stub_->rpcmethod_QueryNotifications_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::chatservice::Notification>* ChatService::Stub::AsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::chatservice::QueryNotificationsMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatservice::Notification>::Create(channel_.get(), cq, rpcmethod_QueryNotifications_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::chatservice::Notification>* ChatService::Stub::PrepareAsyncQueryNotificationsRaw(::grpc::ClientContext* context, const ::chatservice::QueryNotificationsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatservice::Notification>::Create(channel_.get(), cq, rpcmethod_QueryNotifications_, context, request, false, nullptr);
}

::grpc::ClientReader< ::chatservice::ChatMessage>* ChatService::Stub::QueryMessagesRaw(::grpc::ClientContext* context, const ::chatservice::QueryMessagesMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::chatservice::ChatMessage>::Create(channel_.get(), rpcmethod_QueryMessages_, context, request);
}

void ChatService::Stub::async::QueryMessages(::grpc::ClientContext* context, const ::chatservice::QueryMessagesMessage* request, ::grpc::ClientReadReactor< ::chatservice::ChatMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::chatservice::ChatMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_QueryMessages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::chatservice::ChatMessage>* ChatService::Stub::AsyncQueryMessagesRaw(::grpc::ClientContext* context, const ::chatservice::QueryMessagesMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatservice::ChatMessage>::Create(channel_.get(), cq, rpcmethod_QueryMessages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::chatservice::ChatMessage>* ChatService::Stub::PrepareAsyncQueryMessagesRaw(::grpc::ClientContext* context, const ::chatservice::QueryMessagesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chatservice::ChatMessage>::Create(channel_.get(), cq, rpcmethod_QueryMessages_, context, request, false, nullptr);
}

::grpc::Status ChatService::Stub::DeleteAccount(::grpc::ClientContext* context, const ::chatservice::DeleteAccountMessage& request, ::chatservice::DeleteAccountReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatservice::DeleteAccountMessage, ::chatservice::DeleteAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAccount_, context, request, response);
}

void ChatService::Stub::async::DeleteAccount(::grpc::ClientContext* context, const ::chatservice::DeleteAccountMessage* request, ::chatservice::DeleteAccountReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatservice::DeleteAccountMessage, ::chatservice::DeleteAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, std::move(f));
}

void ChatService::Stub::async::DeleteAccount(::grpc::ClientContext* context, const ::chatservice::DeleteAccountMessage* request, ::chatservice::DeleteAccountReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatservice::DeleteAccountReply>* ChatService::Stub::PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::chatservice::DeleteAccountMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatservice::DeleteAccountReply, ::chatservice::DeleteAccountMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatservice::DeleteAccountReply>* ChatService::Stub::AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::chatservice::DeleteAccountMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::MessagesSeen(::grpc::ClientContext* context, const ::chatservice::MessagesSeenMessage& request, ::chatservice::MessagesSeenMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatservice::MessagesSeenMessage, ::chatservice::MessagesSeenMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MessagesSeen_, context, request, response);
}

void ChatService::Stub::async::MessagesSeen(::grpc::ClientContext* context, const ::chatservice::MessagesSeenMessage* request, ::chatservice::MessagesSeenMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatservice::MessagesSeenMessage, ::chatservice::MessagesSeenMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MessagesSeen_, context, request, response, std::move(f));
}

void ChatService::Stub::async::MessagesSeen(::grpc::ClientContext* context, const ::chatservice::MessagesSeenMessage* request, ::chatservice::MessagesSeenMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MessagesSeen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatservice::MessagesSeenMessage>* ChatService::Stub::PrepareAsyncMessagesSeenRaw(::grpc::ClientContext* context, const ::chatservice::MessagesSeenMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatservice::MessagesSeenMessage, ::chatservice::MessagesSeenMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MessagesSeen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatservice::MessagesSeenMessage>* ChatService::Stub::AsyncMessagesSeenRaw(::grpc::ClientContext* context, const ::chatservice::MessagesSeenMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMessagesSeenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::NewMessage(::grpc::ClientContext* context, const ::chatservice::ChatMessage& request, ::chatservice::NewMessageReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chatservice::ChatMessage, ::chatservice::NewMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NewMessage_, context, request, response);
}

void ChatService::Stub::async::NewMessage(::grpc::ClientContext* context, const ::chatservice::ChatMessage* request, ::chatservice::NewMessageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chatservice::ChatMessage, ::chatservice::NewMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewMessage_, context, request, response, std::move(f));
}

void ChatService::Stub::async::NewMessage(::grpc::ClientContext* context, const ::chatservice::ChatMessage* request, ::chatservice::NewMessageReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NewMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chatservice::NewMessageReply>* ChatService::Stub::PrepareAsyncNewMessageRaw(::grpc::ClientContext* context, const ::chatservice::ChatMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chatservice::NewMessageReply, ::chatservice::ChatMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NewMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chatservice::NewMessageReply>* ChatService::Stub::AsyncNewMessageRaw(::grpc::ClientContext* context, const ::chatservice::ChatMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNewMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChatService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::chatservice::CreateAccountMessage, ::chatservice::CreateAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatservice::CreateAccountMessage* req,
             ::chatservice::CreateAccountReply* resp) {
               return service->CreateAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::chatservice::LoginMessage, ::chatservice::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatservice::LoginMessage* req,
             ::chatservice::LoginReply* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::chatservice::LogoutMessage, ::chatservice::LogoutReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatservice::LogoutMessage* req,
             ::chatservice::LogoutReply* resp) {
               return service->Logout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ChatService::Service, ::chatservice::QueryUsersMessage, ::chatservice::User>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatservice::QueryUsersMessage* req,
             ::grpc::ServerWriter<::chatservice::User>* writer) {
               return service->ListUsers(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::chatservice::ChatMessage, ::chatservice::SendMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatservice::ChatMessage* req,
             ::chatservice::SendMessageReply* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ChatService::Service, ::chatservice::QueryNotificationsMessage, ::chatservice::Notification>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatservice::QueryNotificationsMessage* req,
             ::grpc::ServerWriter<::chatservice::Notification>* writer) {
               return service->QueryNotifications(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ChatService::Service, ::chatservice::QueryMessagesMessage, ::chatservice::ChatMessage>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatservice::QueryMessagesMessage* req,
             ::grpc::ServerWriter<::chatservice::ChatMessage>* writer) {
               return service->QueryMessages(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::chatservice::DeleteAccountMessage, ::chatservice::DeleteAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatservice::DeleteAccountMessage* req,
             ::chatservice::DeleteAccountReply* resp) {
               return service->DeleteAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::chatservice::MessagesSeenMessage, ::chatservice::MessagesSeenMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatservice::MessagesSeenMessage* req,
             ::chatservice::MessagesSeenMessage* resp) {
               return service->MessagesSeen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::chatservice::ChatMessage, ::chatservice::NewMessageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chatservice::ChatMessage* req,
             ::chatservice::NewMessageReply* resp) {
               return service->NewMessage(ctx, req, resp);
             }, this)));
}

ChatService::Service::~Service() {
}

::grpc::Status ChatService::Service::CreateAccount(::grpc::ServerContext* context, const ::chatservice::CreateAccountMessage* request, ::chatservice::CreateAccountReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::Login(::grpc::ServerContext* context, const ::chatservice::LoginMessage* request, ::chatservice::LoginReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::Logout(::grpc::ServerContext* context, const ::chatservice::LogoutMessage* request, ::chatservice::LogoutReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::ListUsers(::grpc::ServerContext* context, const ::chatservice::QueryUsersMessage* request, ::grpc::ServerWriter< ::chatservice::User>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::SendMessage(::grpc::ServerContext* context, const ::chatservice::ChatMessage* request, ::chatservice::SendMessageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::QueryNotifications(::grpc::ServerContext* context, const ::chatservice::QueryNotificationsMessage* request, ::grpc::ServerWriter< ::chatservice::Notification>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::QueryMessages(::grpc::ServerContext* context, const ::chatservice::QueryMessagesMessage* request, ::grpc::ServerWriter< ::chatservice::ChatMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::DeleteAccount(::grpc::ServerContext* context, const ::chatservice::DeleteAccountMessage* request, ::chatservice::DeleteAccountReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::MessagesSeen(::grpc::ServerContext* context, const ::chatservice::MessagesSeenMessage* request, ::chatservice::MessagesSeenMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::NewMessage(::grpc::ServerContext* context, const ::chatservice::ChatMessage* request, ::chatservice::NewMessageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chatservice

