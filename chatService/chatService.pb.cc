// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatService.proto

#include "chatService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chatservice {
PROTOBUF_CONSTEXPR createAccountMessage::createAccountMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct createAccountMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createAccountMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~createAccountMessageDefaultTypeInternal() {}
  union {
    createAccountMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createAccountMessageDefaultTypeInternal _createAccountMessage_default_instance_;
PROTOBUF_CONSTEXPR createAccountReply::createAccountReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errormsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createaccountsuccess_)*/false} {}
struct createAccountReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createAccountReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~createAccountReplyDefaultTypeInternal() {}
  union {
    createAccountReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createAccountReplyDefaultTypeInternal _createAccountReply_default_instance_;
PROTOBUF_CONSTEXPR loginMessage::loginMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct loginMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR loginMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~loginMessageDefaultTypeInternal() {}
  union {
    loginMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 loginMessageDefaultTypeInternal _loginMessage_default_instance_;
PROTOBUF_CONSTEXPR loginReply::loginReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errormsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.loginsuccess_)*/false} {}
struct loginReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR loginReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~loginReplyDefaultTypeInternal() {}
  union {
    loginReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 loginReplyDefaultTypeInternal _loginReply_default_instance_;
PROTOBUF_CONSTEXPR logoutMessage::logoutMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loggingout_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct logoutMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR logoutMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~logoutMessageDefaultTypeInternal() {}
  union {
    logoutMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 logoutMessageDefaultTypeInternal _logoutMessage_default_instance_;
PROTOBUF_CONSTEXPR logoutReply::logoutReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errormsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.loggedout_)*/false} {}
struct logoutReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR logoutReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~logoutReplyDefaultTypeInternal() {}
  union {
    logoutReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 logoutReplyDefaultTypeInternal _logoutReply_default_instance_;
PROTOBUF_CONSTEXPR queryUsersMessage::queryUsersMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct queryUsersMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR queryUsersMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~queryUsersMessageDefaultTypeInternal() {}
  union {
    queryUsersMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 queryUsersMessageDefaultTypeInternal _queryUsersMessage_default_instance_;
PROTOBUF_CONSTEXPR user::user(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct userDefaultTypeInternal {
  PROTOBUF_CONSTEXPR userDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~userDefaultTypeInternal() {}
  union {
    user _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 userDefaultTypeInternal _user_default_instance_;
PROTOBUF_CONSTEXPR sendMessageReply::sendMessageReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errormsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.messagesent_)*/false} {}
struct sendMessageReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR sendMessageReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~sendMessageReplyDefaultTypeInternal() {}
  union {
    sendMessageReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 sendMessageReplyDefaultTypeInternal _sendMessageReply_default_instance_;
PROTOBUF_CONSTEXPR queryNotificationsMessage::queryNotificationsMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queryingnotifications_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct queryNotificationsMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR queryNotificationsMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~queryNotificationsMessageDefaultTypeInternal() {}
  union {
    queryNotificationsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 queryNotificationsMessageDefaultTypeInternal _queryNotificationsMessage_default_instance_;
PROTOBUF_CONSTEXPR notification::notification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.numberofnotifications_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct notificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR notificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~notificationDefaultTypeInternal() {}
  union {
    notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 notificationDefaultTypeInternal _notification_default_instance_;
PROTOBUF_CONSTEXPR queryMessagesMessage::queryMessagesMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct queryMessagesMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR queryMessagesMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~queryMessagesMessageDefaultTypeInternal() {}
  union {
    queryMessagesMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 queryMessagesMessageDefaultTypeInternal _queryMessagesMessage_default_instance_;
PROTOBUF_CONSTEXPR chatMessage::chatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.senderusername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgcontent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct chatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR chatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~chatMessageDefaultTypeInternal() {}
  union {
    chatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 chatMessageDefaultTypeInternal _chatMessage_default_instance_;
PROTOBUF_CONSTEXPR deleteAccountMessage::deleteAccountMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deletingaccount_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct deleteAccountMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR deleteAccountMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~deleteAccountMessageDefaultTypeInternal() {}
  union {
    deleteAccountMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 deleteAccountMessageDefaultTypeInternal _deleteAccountMessage_default_instance_;
PROTOBUF_CONSTEXPR deleteAccountReply::deleteAccountReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errormsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deletedaccount_)*/false} {}
struct deleteAccountReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR deleteAccountReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~deleteAccountReplyDefaultTypeInternal() {}
  union {
    deleteAccountReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 deleteAccountReplyDefaultTypeInternal _deleteAccountReply_default_instance_;
PROTOBUF_CONSTEXPR messagesSeenMessage::messagesSeenMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messagesseen_)*/0
  , /*decltype(_impl_.firstmessageidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct messagesSeenMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR messagesSeenMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~messagesSeenMessageDefaultTypeInternal() {}
  union {
    messagesSeenMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 messagesSeenMessageDefaultTypeInternal _messagesSeenMessage_default_instance_;
PROTOBUF_CONSTEXPR newMessageReply::newMessageReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.received_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct newMessageReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR newMessageReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~newMessageReplyDefaultTypeInternal() {}
  union {
    newMessageReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 newMessageReplyDefaultTypeInternal _newMessageReply_default_instance_;
}  // namespace chatservice
static ::_pb::Metadata file_level_metadata_chatService_2eproto[17];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_chatService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chatService_2eproto = nullptr;

const uint32_t TableStruct_chatService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chatservice::createAccountMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::createAccountMessage, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::chatservice::createAccountMessage, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::chatservice::createAccountReply, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::chatservice::createAccountReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::createAccountReply, _impl_.createaccountsuccess_),
  PROTOBUF_FIELD_OFFSET(::chatservice::createAccountReply, _impl_.errormsg_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chatservice::loginMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::loginMessage, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::chatservice::loginMessage, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::chatservice::loginReply, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::chatservice::loginReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::loginReply, _impl_.loginsuccess_),
  PROTOBUF_FIELD_OFFSET(::chatservice::loginReply, _impl_.errormsg_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chatservice::logoutMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::logoutMessage, _impl_.loggingout_),
  PROTOBUF_FIELD_OFFSET(::chatservice::logoutReply, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::chatservice::logoutReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::logoutReply, _impl_.loggedout_),
  PROTOBUF_FIELD_OFFSET(::chatservice::logoutReply, _impl_.errormsg_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::chatservice::queryUsersMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::chatservice::queryUsersMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::queryUsersMessage, _impl_.username_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chatservice::user, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::user, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::chatservice::sendMessageReply, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::chatservice::sendMessageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::sendMessageReply, _impl_.messagesent_),
  PROTOBUF_FIELD_OFFSET(::chatservice::sendMessageReply, _impl_.errormsg_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chatservice::queryNotificationsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::queryNotificationsMessage, _impl_.queryingnotifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chatservice::notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::notification, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::chatservice::notification, _impl_.numberofnotifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chatservice::queryMessagesMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::queryMessagesMessage, _impl_.username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chatservice::chatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::chatMessage, _impl_.senderusername_),
  PROTOBUF_FIELD_OFFSET(::chatservice::chatMessage, _impl_.msgcontent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chatservice::deleteAccountMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::deleteAccountMessage, _impl_.deletingaccount_),
  PROTOBUF_FIELD_OFFSET(::chatservice::deleteAccountReply, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::chatservice::deleteAccountReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::deleteAccountReply, _impl_.deletedaccount_),
  PROTOBUF_FIELD_OFFSET(::chatservice::deleteAccountReply, _impl_.errormsg_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chatservice::messagesSeenMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::messagesSeenMessage, _impl_.messagesseen_),
  PROTOBUF_FIELD_OFFSET(::chatservice::messagesSeenMessage, _impl_.firstmessageidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chatservice::newMessageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chatservice::newMessageReply, _impl_.received_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::chatservice::createAccountMessage)},
  { 8, 16, -1, sizeof(::chatservice::createAccountReply)},
  { 18, -1, -1, sizeof(::chatservice::loginMessage)},
  { 26, 34, -1, sizeof(::chatservice::loginReply)},
  { 36, -1, -1, sizeof(::chatservice::logoutMessage)},
  { 43, 51, -1, sizeof(::chatservice::logoutReply)},
  { 53, 60, -1, sizeof(::chatservice::queryUsersMessage)},
  { 61, -1, -1, sizeof(::chatservice::user)},
  { 68, 76, -1, sizeof(::chatservice::sendMessageReply)},
  { 78, -1, -1, sizeof(::chatservice::queryNotificationsMessage)},
  { 85, -1, -1, sizeof(::chatservice::notification)},
  { 93, -1, -1, sizeof(::chatservice::queryMessagesMessage)},
  { 100, -1, -1, sizeof(::chatservice::chatMessage)},
  { 108, -1, -1, sizeof(::chatservice::deleteAccountMessage)},
  { 115, 123, -1, sizeof(::chatservice::deleteAccountReply)},
  { 125, -1, -1, sizeof(::chatservice::messagesSeenMessage)},
  { 133, -1, -1, sizeof(::chatservice::newMessageReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::chatservice::_createAccountMessage_default_instance_._instance,
  &::chatservice::_createAccountReply_default_instance_._instance,
  &::chatservice::_loginMessage_default_instance_._instance,
  &::chatservice::_loginReply_default_instance_._instance,
  &::chatservice::_logoutMessage_default_instance_._instance,
  &::chatservice::_logoutReply_default_instance_._instance,
  &::chatservice::_queryUsersMessage_default_instance_._instance,
  &::chatservice::_user_default_instance_._instance,
  &::chatservice::_sendMessageReply_default_instance_._instance,
  &::chatservice::_queryNotificationsMessage_default_instance_._instance,
  &::chatservice::_notification_default_instance_._instance,
  &::chatservice::_queryMessagesMessage_default_instance_._instance,
  &::chatservice::_chatMessage_default_instance_._instance,
  &::chatservice::_deleteAccountMessage_default_instance_._instance,
  &::chatservice::_deleteAccountReply_default_instance_._instance,
  &::chatservice::_messagesSeenMessage_default_instance_._instance,
  &::chatservice::_newMessageReply_default_instance_._instance,
};

const char descriptor_table_protodef_chatService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021chatService.proto\022\013chatservice\":\n\024crea"
  "teAccountMessage\022\020\n\010username\030\001 \001(\t\022\020\n\010pa"
  "ssword\030\002 \001(\t\"V\n\022createAccountReply\022\034\n\024cr"
  "eateAccountSuccess\030\001 \001(\010\022\025\n\010errorMsg\030\002 \001"
  "(\tH\000\210\001\001B\013\n\t_errorMsg\"2\n\014loginMessage\022\020\n\010"
  "username\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"F\n\nlogi"
  "nReply\022\024\n\014loginSuccess\030\001 \001(\010\022\025\n\010errorMsg"
  "\030\002 \001(\tH\000\210\001\001B\013\n\t_errorMsg\"#\n\rlogoutMessag"
  "e\022\022\n\nloggingOut\030\001 \001(\010\"D\n\013logoutReply\022\021\n\t"
  "loggedOut\030\001 \001(\010\022\025\n\010errorMsg\030\002 \001(\tH\000\210\001\001B\013"
  "\n\t_errorMsg\"7\n\021queryUsersMessage\022\025\n\010user"
  "name\030\001 \001(\tH\000\210\001\001B\013\n\t_username\"\030\n\004user\022\020\n\010"
  "username\030\001 \001(\t\"K\n\020sendMessageReply\022\023\n\013me"
  "ssageSent\030\001 \001(\010\022\025\n\010errorMsg\030\002 \001(\tH\000\210\001\001B\013"
  "\n\t_errorMsg\":\n\031queryNotificationsMessage"
  "\022\035\n\025queryingNotifications\030\001 \001(\010\";\n\014notif"
  "ication\022\014\n\004user\030\001 \001(\t\022\035\n\025numberOfNotific"
  "ations\030\002 \001(\005\"(\n\024queryMessagesMessage\022\020\n\010"
  "username\030\001 \001(\t\"9\n\013chatMessage\022\026\n\016senderU"
  "sername\030\001 \001(\t\022\022\n\nmsgContent\030\002 \001(\t\"/\n\024del"
  "eteAccountMessage\022\027\n\017deletingAccount\030\001 \001"
  "(\010\"P\n\022deleteAccountReply\022\026\n\016deletedAccou"
  "nt\030\001 \001(\010\022\025\n\010errorMsg\030\002 \001(\tH\000\210\001\001B\013\n\t_erro"
  "rMsg\"D\n\023messagesSeenMessage\022\024\n\014messagesS"
  "een\030\001 \001(\005\022\027\n\017firstMessageIdx\030\002 \001(\005\"#\n\017ne"
  "wMessageReply\022\020\n\010received\030\001 \001(\0102\203\006\n\013Chat"
  "Service\022S\n\rCreateAccount\022!.chatservice.c"
  "reateAccountMessage\032\037.chatservice.create"
  "AccountReply\022;\n\005Login\022\031.chatservice.logi"
  "nMessage\032\027.chatservice.loginReply\022>\n\006Log"
  "out\022\032.chatservice.logoutMessage\032\030.chatse"
  "rvice.logoutReply\022@\n\tListUsers\022\036.chatser"
  "vice.queryUsersMessage\032\021.chatservice.use"
  "r0\001\022F\n\013SendMessage\022\030.chatservice.chatMes"
  "sage\032\035.chatservice.sendMessageReply\022Y\n\022Q"
  "ueryNotifications\022&.chatservice.queryNot"
  "ificationsMessage\032\031.chatservice.notifica"
  "tion0\001\022N\n\rQueryMessages\022!.chatservice.qu"
  "eryMessagesMessage\032\030.chatservice.chatMes"
  "sage0\001\022S\n\rDeleteAccount\022!.chatservice.de"
  "leteAccountMessage\032\037.chatservice.deleteA"
  "ccountReply\022R\n\014MessagesSeen\022 .chatservic"
  "e.messagesSeenMessage\032 .chatservice.mess"
  "agesSeenMessage\022D\n\nNewMessage\022\030.chatserv"
  "ice.chatMessage\032\034.chatservice.newMessage"
  "Replyb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_chatService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chatService_2eproto = {
    false, false, 1813, descriptor_table_protodef_chatService_2eproto,
    "chatService.proto",
    &descriptor_table_chatService_2eproto_once, nullptr, 0, 17,
    schemas, file_default_instances, TableStruct_chatService_2eproto::offsets,
    file_level_metadata_chatService_2eproto, file_level_enum_descriptors_chatService_2eproto,
    file_level_service_descriptors_chatService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chatService_2eproto_getter() {
  return &descriptor_table_chatService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chatService_2eproto(&descriptor_table_chatService_2eproto);
namespace chatservice {

// ===================================================================

class createAccountMessage::_Internal {
 public:
};

createAccountMessage::createAccountMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.createAccountMessage)
}
createAccountMessage::createAccountMessage(const createAccountMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  createAccountMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chatservice.createAccountMessage)
}

inline void createAccountMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

createAccountMessage::~createAccountMessage() {
  // @@protoc_insertion_point(destructor:chatservice.createAccountMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void createAccountMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
}

void createAccountMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void createAccountMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.createAccountMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createAccountMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.createAccountMessage.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.createAccountMessage.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* createAccountMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.createAccountMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.createAccountMessage.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.createAccountMessage.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.createAccountMessage)
  return target;
}

size_t createAccountMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.createAccountMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createAccountMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    createAccountMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createAccountMessage::GetClassData() const { return &_class_data_; }


void createAccountMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<createAccountMessage*>(&to_msg);
  auto& from = static_cast<const createAccountMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.createAccountMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void createAccountMessage::CopyFrom(const createAccountMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.createAccountMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createAccountMessage::IsInitialized() const {
  return true;
}

void createAccountMessage::InternalSwap(createAccountMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata createAccountMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[0]);
}

// ===================================================================

class createAccountReply::_Internal {
 public:
  using HasBits = decltype(std::declval<createAccountReply>()._impl_._has_bits_);
  static void set_has_errormsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

createAccountReply::createAccountReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.createAccountReply)
}
createAccountReply::createAccountReply(const createAccountReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  createAccountReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.createaccountsuccess_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errormsg()) {
    _this->_impl_.errormsg_.Set(from._internal_errormsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.createaccountsuccess_ = from._impl_.createaccountsuccess_;
  // @@protoc_insertion_point(copy_constructor:chatservice.createAccountReply)
}

inline void createAccountReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.createaccountsuccess_){false}
  };
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

createAccountReply::~createAccountReply() {
  // @@protoc_insertion_point(destructor:chatservice.createAccountReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void createAccountReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errormsg_.Destroy();
}

void createAccountReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void createAccountReply::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.createAccountReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.errormsg_.ClearNonDefaultToEmpty();
  }
  _impl_.createaccountsuccess_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createAccountReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool createAccountSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.createaccountsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string errorMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.createAccountReply.errorMsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* createAccountReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.createAccountReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool createAccountSuccess = 1;
  if (this->_internal_createaccountsuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_createaccountsuccess(), target);
  }

  // optional string errorMsg = 2;
  if (_internal_has_errormsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.createAccountReply.errorMsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.createAccountReply)
  return target;
}

size_t createAccountReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.createAccountReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string errorMsg = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormsg());
  }

  // bool createAccountSuccess = 1;
  if (this->_internal_createaccountsuccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createAccountReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    createAccountReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createAccountReply::GetClassData() const { return &_class_data_; }


void createAccountReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<createAccountReply*>(&to_msg);
  auto& from = static_cast<const createAccountReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.createAccountReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errormsg()) {
    _this->_internal_set_errormsg(from._internal_errormsg());
  }
  if (from._internal_createaccountsuccess() != 0) {
    _this->_internal_set_createaccountsuccess(from._internal_createaccountsuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void createAccountReply::CopyFrom(const createAccountReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.createAccountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createAccountReply::IsInitialized() const {
  return true;
}

void createAccountReply::InternalSwap(createAccountReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormsg_, lhs_arena,
      &other->_impl_.errormsg_, rhs_arena
  );
  swap(_impl_.createaccountsuccess_, other->_impl_.createaccountsuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata createAccountReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[1]);
}

// ===================================================================

class loginMessage::_Internal {
 public:
};

loginMessage::loginMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.loginMessage)
}
loginMessage::loginMessage(const loginMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  loginMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chatservice.loginMessage)
}

inline void loginMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

loginMessage::~loginMessage() {
  // @@protoc_insertion_point(destructor:chatservice.loginMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void loginMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
}

void loginMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void loginMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.loginMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loginMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.loginMessage.username"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.loginMessage.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* loginMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.loginMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.loginMessage.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.loginMessage.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.loginMessage)
  return target;
}

size_t loginMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.loginMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData loginMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    loginMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*loginMessage::GetClassData() const { return &_class_data_; }


void loginMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<loginMessage*>(&to_msg);
  auto& from = static_cast<const loginMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.loginMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void loginMessage::CopyFrom(const loginMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.loginMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginMessage::IsInitialized() const {
  return true;
}

void loginMessage::InternalSwap(loginMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata loginMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[2]);
}

// ===================================================================

class loginReply::_Internal {
 public:
  using HasBits = decltype(std::declval<loginReply>()._impl_._has_bits_);
  static void set_has_errormsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

loginReply::loginReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.loginReply)
}
loginReply::loginReply(const loginReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  loginReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.loginsuccess_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errormsg()) {
    _this->_impl_.errormsg_.Set(from._internal_errormsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.loginsuccess_ = from._impl_.loginsuccess_;
  // @@protoc_insertion_point(copy_constructor:chatservice.loginReply)
}

inline void loginReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.loginsuccess_){false}
  };
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

loginReply::~loginReply() {
  // @@protoc_insertion_point(destructor:chatservice.loginReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void loginReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errormsg_.Destroy();
}

void loginReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void loginReply::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.loginReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.errormsg_.ClearNonDefaultToEmpty();
  }
  _impl_.loginsuccess_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loginReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool loginSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.loginsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string errorMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.loginReply.errorMsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* loginReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.loginReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool loginSuccess = 1;
  if (this->_internal_loginsuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_loginsuccess(), target);
  }

  // optional string errorMsg = 2;
  if (_internal_has_errormsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.loginReply.errorMsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.loginReply)
  return target;
}

size_t loginReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.loginReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string errorMsg = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormsg());
  }

  // bool loginSuccess = 1;
  if (this->_internal_loginsuccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData loginReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    loginReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*loginReply::GetClassData() const { return &_class_data_; }


void loginReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<loginReply*>(&to_msg);
  auto& from = static_cast<const loginReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.loginReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errormsg()) {
    _this->_internal_set_errormsg(from._internal_errormsg());
  }
  if (from._internal_loginsuccess() != 0) {
    _this->_internal_set_loginsuccess(from._internal_loginsuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void loginReply::CopyFrom(const loginReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.loginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginReply::IsInitialized() const {
  return true;
}

void loginReply::InternalSwap(loginReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormsg_, lhs_arena,
      &other->_impl_.errormsg_, rhs_arena
  );
  swap(_impl_.loginsuccess_, other->_impl_.loginsuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata loginReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[3]);
}

// ===================================================================

class logoutMessage::_Internal {
 public:
};

logoutMessage::logoutMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.logoutMessage)
}
logoutMessage::logoutMessage(const logoutMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  logoutMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loggingout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.loggingout_ = from._impl_.loggingout_;
  // @@protoc_insertion_point(copy_constructor:chatservice.logoutMessage)
}

inline void logoutMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loggingout_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

logoutMessage::~logoutMessage() {
  // @@protoc_insertion_point(destructor:chatservice.logoutMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void logoutMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void logoutMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void logoutMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.logoutMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loggingout_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* logoutMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool loggingOut = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.loggingout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* logoutMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.logoutMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool loggingOut = 1;
  if (this->_internal_loggingout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_loggingout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.logoutMessage)
  return target;
}

size_t logoutMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.logoutMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool loggingOut = 1;
  if (this->_internal_loggingout() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData logoutMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    logoutMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*logoutMessage::GetClassData() const { return &_class_data_; }


void logoutMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<logoutMessage*>(&to_msg);
  auto& from = static_cast<const logoutMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.logoutMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_loggingout() != 0) {
    _this->_internal_set_loggingout(from._internal_loggingout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void logoutMessage::CopyFrom(const logoutMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.logoutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logoutMessage::IsInitialized() const {
  return true;
}

void logoutMessage::InternalSwap(logoutMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.loggingout_, other->_impl_.loggingout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata logoutMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[4]);
}

// ===================================================================

class logoutReply::_Internal {
 public:
  using HasBits = decltype(std::declval<logoutReply>()._impl_._has_bits_);
  static void set_has_errormsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

logoutReply::logoutReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.logoutReply)
}
logoutReply::logoutReply(const logoutReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  logoutReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.loggedout_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errormsg()) {
    _this->_impl_.errormsg_.Set(from._internal_errormsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.loggedout_ = from._impl_.loggedout_;
  // @@protoc_insertion_point(copy_constructor:chatservice.logoutReply)
}

inline void logoutReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.loggedout_){false}
  };
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

logoutReply::~logoutReply() {
  // @@protoc_insertion_point(destructor:chatservice.logoutReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void logoutReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errormsg_.Destroy();
}

void logoutReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void logoutReply::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.logoutReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.errormsg_.ClearNonDefaultToEmpty();
  }
  _impl_.loggedout_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* logoutReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool loggedOut = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.loggedout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string errorMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.logoutReply.errorMsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* logoutReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.logoutReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool loggedOut = 1;
  if (this->_internal_loggedout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_loggedout(), target);
  }

  // optional string errorMsg = 2;
  if (_internal_has_errormsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.logoutReply.errorMsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.logoutReply)
  return target;
}

size_t logoutReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.logoutReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string errorMsg = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormsg());
  }

  // bool loggedOut = 1;
  if (this->_internal_loggedout() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData logoutReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    logoutReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*logoutReply::GetClassData() const { return &_class_data_; }


void logoutReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<logoutReply*>(&to_msg);
  auto& from = static_cast<const logoutReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.logoutReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errormsg()) {
    _this->_internal_set_errormsg(from._internal_errormsg());
  }
  if (from._internal_loggedout() != 0) {
    _this->_internal_set_loggedout(from._internal_loggedout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void logoutReply::CopyFrom(const logoutReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.logoutReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logoutReply::IsInitialized() const {
  return true;
}

void logoutReply::InternalSwap(logoutReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormsg_, lhs_arena,
      &other->_impl_.errormsg_, rhs_arena
  );
  swap(_impl_.loggedout_, other->_impl_.loggedout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata logoutReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[5]);
}

// ===================================================================

class queryUsersMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<queryUsersMessage>()._impl_._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

queryUsersMessage::queryUsersMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.queryUsersMessage)
}
queryUsersMessage::queryUsersMessage(const queryUsersMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  queryUsersMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.username_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chatservice.queryUsersMessage)
}

inline void queryUsersMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.username_){}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

queryUsersMessage::~queryUsersMessage() {
  // @@protoc_insertion_point(destructor:chatservice.queryUsersMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void queryUsersMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
}

void queryUsersMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void queryUsersMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.queryUsersMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.username_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryUsersMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.queryUsersMessage.username"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queryUsersMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.queryUsersMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string username = 1;
  if (_internal_has_username()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.queryUsersMessage.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.queryUsersMessage)
  return target;
}

size_t queryUsersMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.queryUsersMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string username = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queryUsersMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    queryUsersMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queryUsersMessage::GetClassData() const { return &_class_data_; }


void queryUsersMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<queryUsersMessage*>(&to_msg);
  auto& from = static_cast<const queryUsersMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.queryUsersMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_username()) {
    _this->_internal_set_username(from._internal_username());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queryUsersMessage::CopyFrom(const queryUsersMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.queryUsersMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryUsersMessage::IsInitialized() const {
  return true;
}

void queryUsersMessage::InternalSwap(queryUsersMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata queryUsersMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[6]);
}

// ===================================================================

class user::_Internal {
 public:
};

user::user(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.user)
}
user::user(const user& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  user* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chatservice.user)
}

inline void user::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

user::~user() {
  // @@protoc_insertion_point(destructor:chatservice.user)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void user::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
}

void user::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void user::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.user)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.user.username"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* user::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.user)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.user.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.user)
  return target;
}

size_t user::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.user)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData user::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    user::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*user::GetClassData() const { return &_class_data_; }


void user::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<user*>(&to_msg);
  auto& from = static_cast<const user&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.user)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void user::CopyFrom(const user& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.user)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user::IsInitialized() const {
  return true;
}

void user::InternalSwap(user* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata user::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[7]);
}

// ===================================================================

class sendMessageReply::_Internal {
 public:
  using HasBits = decltype(std::declval<sendMessageReply>()._impl_._has_bits_);
  static void set_has_errormsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

sendMessageReply::sendMessageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.sendMessageReply)
}
sendMessageReply::sendMessageReply(const sendMessageReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  sendMessageReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.messagesent_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errormsg()) {
    _this->_impl_.errormsg_.Set(from._internal_errormsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.messagesent_ = from._impl_.messagesent_;
  // @@protoc_insertion_point(copy_constructor:chatservice.sendMessageReply)
}

inline void sendMessageReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.messagesent_){false}
  };
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

sendMessageReply::~sendMessageReply() {
  // @@protoc_insertion_point(destructor:chatservice.sendMessageReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void sendMessageReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errormsg_.Destroy();
}

void sendMessageReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void sendMessageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.sendMessageReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.errormsg_.ClearNonDefaultToEmpty();
  }
  _impl_.messagesent_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sendMessageReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool messageSent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.messagesent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string errorMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.sendMessageReply.errorMsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* sendMessageReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.sendMessageReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool messageSent = 1;
  if (this->_internal_messagesent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_messagesent(), target);
  }

  // optional string errorMsg = 2;
  if (_internal_has_errormsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.sendMessageReply.errorMsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.sendMessageReply)
  return target;
}

size_t sendMessageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.sendMessageReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string errorMsg = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormsg());
  }

  // bool messageSent = 1;
  if (this->_internal_messagesent() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sendMessageReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    sendMessageReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sendMessageReply::GetClassData() const { return &_class_data_; }


void sendMessageReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<sendMessageReply*>(&to_msg);
  auto& from = static_cast<const sendMessageReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.sendMessageReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errormsg()) {
    _this->_internal_set_errormsg(from._internal_errormsg());
  }
  if (from._internal_messagesent() != 0) {
    _this->_internal_set_messagesent(from._internal_messagesent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sendMessageReply::CopyFrom(const sendMessageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.sendMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sendMessageReply::IsInitialized() const {
  return true;
}

void sendMessageReply::InternalSwap(sendMessageReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormsg_, lhs_arena,
      &other->_impl_.errormsg_, rhs_arena
  );
  swap(_impl_.messagesent_, other->_impl_.messagesent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sendMessageReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[8]);
}

// ===================================================================

class queryNotificationsMessage::_Internal {
 public:
};

queryNotificationsMessage::queryNotificationsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.queryNotificationsMessage)
}
queryNotificationsMessage::queryNotificationsMessage(const queryNotificationsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  queryNotificationsMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queryingnotifications_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.queryingnotifications_ = from._impl_.queryingnotifications_;
  // @@protoc_insertion_point(copy_constructor:chatservice.queryNotificationsMessage)
}

inline void queryNotificationsMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queryingnotifications_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

queryNotificationsMessage::~queryNotificationsMessage() {
  // @@protoc_insertion_point(destructor:chatservice.queryNotificationsMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void queryNotificationsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void queryNotificationsMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void queryNotificationsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.queryNotificationsMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queryingnotifications_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryNotificationsMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool queryingNotifications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.queryingnotifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queryNotificationsMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.queryNotificationsMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool queryingNotifications = 1;
  if (this->_internal_queryingnotifications() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_queryingnotifications(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.queryNotificationsMessage)
  return target;
}

size_t queryNotificationsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.queryNotificationsMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool queryingNotifications = 1;
  if (this->_internal_queryingnotifications() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queryNotificationsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    queryNotificationsMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queryNotificationsMessage::GetClassData() const { return &_class_data_; }


void queryNotificationsMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<queryNotificationsMessage*>(&to_msg);
  auto& from = static_cast<const queryNotificationsMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.queryNotificationsMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_queryingnotifications() != 0) {
    _this->_internal_set_queryingnotifications(from._internal_queryingnotifications());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queryNotificationsMessage::CopyFrom(const queryNotificationsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.queryNotificationsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryNotificationsMessage::IsInitialized() const {
  return true;
}

void queryNotificationsMessage::InternalSwap(queryNotificationsMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.queryingnotifications_, other->_impl_.queryingnotifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata queryNotificationsMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[9]);
}

// ===================================================================

class notification::_Internal {
 public:
};

notification::notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.notification)
}
notification::notification(const notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  notification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.numberofnotifications_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.numberofnotifications_ = from._impl_.numberofnotifications_;
  // @@protoc_insertion_point(copy_constructor:chatservice.notification)
}

inline void notification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.numberofnotifications_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

notification::~notification() {
  // @@protoc_insertion_point(destructor:chatservice.notification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
}

void notification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void notification::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _impl_.numberofnotifications_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* notification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.notification.user"));
        } else
          goto handle_unusual;
        continue;
      // int32 numberOfNotifications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.numberofnotifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.notification.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // int32 numberOfNotifications = 2;
  if (this->_internal_numberofnotifications() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_numberofnotifications(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.notification)
  return target;
}

size_t notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // int32 numberOfNotifications = 2;
  if (this->_internal_numberofnotifications() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numberofnotifications());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*notification::GetClassData() const { return &_class_data_; }


void notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<notification*>(&to_msg);
  auto& from = static_cast<const notification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.notification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_numberofnotifications() != 0) {
    _this->_internal_set_numberofnotifications(from._internal_numberofnotifications());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void notification::CopyFrom(const notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notification::IsInitialized() const {
  return true;
}

void notification::InternalSwap(notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  swap(_impl_.numberofnotifications_, other->_impl_.numberofnotifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata notification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[10]);
}

// ===================================================================

class queryMessagesMessage::_Internal {
 public:
};

queryMessagesMessage::queryMessagesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.queryMessagesMessage)
}
queryMessagesMessage::queryMessagesMessage(const queryMessagesMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  queryMessagesMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chatservice.queryMessagesMessage)
}

inline void queryMessagesMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

queryMessagesMessage::~queryMessagesMessage() {
  // @@protoc_insertion_point(destructor:chatservice.queryMessagesMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void queryMessagesMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
}

void queryMessagesMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void queryMessagesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.queryMessagesMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryMessagesMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.queryMessagesMessage.username"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queryMessagesMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.queryMessagesMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.queryMessagesMessage.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.queryMessagesMessage)
  return target;
}

size_t queryMessagesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.queryMessagesMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queryMessagesMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    queryMessagesMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queryMessagesMessage::GetClassData() const { return &_class_data_; }


void queryMessagesMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<queryMessagesMessage*>(&to_msg);
  auto& from = static_cast<const queryMessagesMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.queryMessagesMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queryMessagesMessage::CopyFrom(const queryMessagesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.queryMessagesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryMessagesMessage::IsInitialized() const {
  return true;
}

void queryMessagesMessage::InternalSwap(queryMessagesMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata queryMessagesMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[11]);
}

// ===================================================================

class chatMessage::_Internal {
 public:
};

chatMessage::chatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.chatMessage)
}
chatMessage::chatMessage(const chatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  chatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.senderusername_){}
    , decltype(_impl_.msgcontent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.senderusername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderusername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_senderusername().empty()) {
    _this->_impl_.senderusername_.Set(from._internal_senderusername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msgcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgcontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgcontent().empty()) {
    _this->_impl_.msgcontent_.Set(from._internal_msgcontent(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chatservice.chatMessage)
}

inline void chatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.senderusername_){}
    , decltype(_impl_.msgcontent_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.senderusername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderusername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msgcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgcontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

chatMessage::~chatMessage() {
  // @@protoc_insertion_point(destructor:chatservice.chatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void chatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.senderusername_.Destroy();
  _impl_.msgcontent_.Destroy();
}

void chatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void chatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.chatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.senderusername_.ClearToEmpty();
  _impl_.msgcontent_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string senderUsername = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_senderusername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.chatMessage.senderUsername"));
        } else
          goto handle_unusual;
        continue;
      // string msgContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msgcontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.chatMessage.msgContent"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* chatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.chatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string senderUsername = 1;
  if (!this->_internal_senderusername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_senderusername().data(), static_cast<int>(this->_internal_senderusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.chatMessage.senderUsername");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_senderusername(), target);
  }

  // string msgContent = 2;
  if (!this->_internal_msgcontent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgcontent().data(), static_cast<int>(this->_internal_msgcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.chatMessage.msgContent");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msgcontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.chatMessage)
  return target;
}

size_t chatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.chatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string senderUsername = 1;
  if (!this->_internal_senderusername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_senderusername());
  }

  // string msgContent = 2;
  if (!this->_internal_msgcontent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgcontent());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData chatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    chatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*chatMessage::GetClassData() const { return &_class_data_; }


void chatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<chatMessage*>(&to_msg);
  auto& from = static_cast<const chatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.chatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_senderusername().empty()) {
    _this->_internal_set_senderusername(from._internal_senderusername());
  }
  if (!from._internal_msgcontent().empty()) {
    _this->_internal_set_msgcontent(from._internal_msgcontent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void chatMessage::CopyFrom(const chatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.chatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatMessage::IsInitialized() const {
  return true;
}

void chatMessage::InternalSwap(chatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.senderusername_, lhs_arena,
      &other->_impl_.senderusername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgcontent_, lhs_arena,
      &other->_impl_.msgcontent_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata chatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[12]);
}

// ===================================================================

class deleteAccountMessage::_Internal {
 public:
};

deleteAccountMessage::deleteAccountMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.deleteAccountMessage)
}
deleteAccountMessage::deleteAccountMessage(const deleteAccountMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  deleteAccountMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deletingaccount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.deletingaccount_ = from._impl_.deletingaccount_;
  // @@protoc_insertion_point(copy_constructor:chatservice.deleteAccountMessage)
}

inline void deleteAccountMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deletingaccount_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

deleteAccountMessage::~deleteAccountMessage() {
  // @@protoc_insertion_point(destructor:chatservice.deleteAccountMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void deleteAccountMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void deleteAccountMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void deleteAccountMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.deleteAccountMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deletingaccount_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deleteAccountMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool deletingAccount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.deletingaccount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* deleteAccountMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.deleteAccountMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool deletingAccount = 1;
  if (this->_internal_deletingaccount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_deletingaccount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.deleteAccountMessage)
  return target;
}

size_t deleteAccountMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.deleteAccountMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool deletingAccount = 1;
  if (this->_internal_deletingaccount() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData deleteAccountMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    deleteAccountMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*deleteAccountMessage::GetClassData() const { return &_class_data_; }


void deleteAccountMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<deleteAccountMessage*>(&to_msg);
  auto& from = static_cast<const deleteAccountMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.deleteAccountMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_deletingaccount() != 0) {
    _this->_internal_set_deletingaccount(from._internal_deletingaccount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void deleteAccountMessage::CopyFrom(const deleteAccountMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.deleteAccountMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteAccountMessage::IsInitialized() const {
  return true;
}

void deleteAccountMessage::InternalSwap(deleteAccountMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.deletingaccount_, other->_impl_.deletingaccount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata deleteAccountMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[13]);
}

// ===================================================================

class deleteAccountReply::_Internal {
 public:
  using HasBits = decltype(std::declval<deleteAccountReply>()._impl_._has_bits_);
  static void set_has_errormsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

deleteAccountReply::deleteAccountReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.deleteAccountReply)
}
deleteAccountReply::deleteAccountReply(const deleteAccountReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  deleteAccountReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.deletedaccount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errormsg()) {
    _this->_impl_.errormsg_.Set(from._internal_errormsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.deletedaccount_ = from._impl_.deletedaccount_;
  // @@protoc_insertion_point(copy_constructor:chatservice.deleteAccountReply)
}

inline void deleteAccountReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.deletedaccount_){false}
  };
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

deleteAccountReply::~deleteAccountReply() {
  // @@protoc_insertion_point(destructor:chatservice.deleteAccountReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void deleteAccountReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errormsg_.Destroy();
}

void deleteAccountReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void deleteAccountReply::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.deleteAccountReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.errormsg_.ClearNonDefaultToEmpty();
  }
  _impl_.deletedaccount_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deleteAccountReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool deletedAccount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.deletedaccount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string errorMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chatservice.deleteAccountReply.errorMsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* deleteAccountReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.deleteAccountReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool deletedAccount = 1;
  if (this->_internal_deletedaccount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_deletedaccount(), target);
  }

  // optional string errorMsg = 2;
  if (_internal_has_errormsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chatservice.deleteAccountReply.errorMsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.deleteAccountReply)
  return target;
}

size_t deleteAccountReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.deleteAccountReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string errorMsg = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormsg());
  }

  // bool deletedAccount = 1;
  if (this->_internal_deletedaccount() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData deleteAccountReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    deleteAccountReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*deleteAccountReply::GetClassData() const { return &_class_data_; }


void deleteAccountReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<deleteAccountReply*>(&to_msg);
  auto& from = static_cast<const deleteAccountReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.deleteAccountReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errormsg()) {
    _this->_internal_set_errormsg(from._internal_errormsg());
  }
  if (from._internal_deletedaccount() != 0) {
    _this->_internal_set_deletedaccount(from._internal_deletedaccount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void deleteAccountReply::CopyFrom(const deleteAccountReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.deleteAccountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteAccountReply::IsInitialized() const {
  return true;
}

void deleteAccountReply::InternalSwap(deleteAccountReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormsg_, lhs_arena,
      &other->_impl_.errormsg_, rhs_arena
  );
  swap(_impl_.deletedaccount_, other->_impl_.deletedaccount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata deleteAccountReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[14]);
}

// ===================================================================

class messagesSeenMessage::_Internal {
 public:
};

messagesSeenMessage::messagesSeenMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.messagesSeenMessage)
}
messagesSeenMessage::messagesSeenMessage(const messagesSeenMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  messagesSeenMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messagesseen_){}
    , decltype(_impl_.firstmessageidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.messagesseen_, &from._impl_.messagesseen_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.firstmessageidx_) -
    reinterpret_cast<char*>(&_impl_.messagesseen_)) + sizeof(_impl_.firstmessageidx_));
  // @@protoc_insertion_point(copy_constructor:chatservice.messagesSeenMessage)
}

inline void messagesSeenMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messagesseen_){0}
    , decltype(_impl_.firstmessageidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

messagesSeenMessage::~messagesSeenMessage() {
  // @@protoc_insertion_point(destructor:chatservice.messagesSeenMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void messagesSeenMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void messagesSeenMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void messagesSeenMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.messagesSeenMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.messagesseen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.firstmessageidx_) -
      reinterpret_cast<char*>(&_impl_.messagesseen_)) + sizeof(_impl_.firstmessageidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* messagesSeenMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 messagesSeen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.messagesseen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 firstMessageIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.firstmessageidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* messagesSeenMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.messagesSeenMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 messagesSeen = 1;
  if (this->_internal_messagesseen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_messagesseen(), target);
  }

  // int32 firstMessageIdx = 2;
  if (this->_internal_firstmessageidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_firstmessageidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.messagesSeenMessage)
  return target;
}

size_t messagesSeenMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.messagesSeenMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 messagesSeen = 1;
  if (this->_internal_messagesseen() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_messagesseen());
  }

  // int32 firstMessageIdx = 2;
  if (this->_internal_firstmessageidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_firstmessageidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData messagesSeenMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    messagesSeenMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*messagesSeenMessage::GetClassData() const { return &_class_data_; }


void messagesSeenMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<messagesSeenMessage*>(&to_msg);
  auto& from = static_cast<const messagesSeenMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.messagesSeenMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_messagesseen() != 0) {
    _this->_internal_set_messagesseen(from._internal_messagesseen());
  }
  if (from._internal_firstmessageidx() != 0) {
    _this->_internal_set_firstmessageidx(from._internal_firstmessageidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void messagesSeenMessage::CopyFrom(const messagesSeenMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.messagesSeenMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool messagesSeenMessage::IsInitialized() const {
  return true;
}

void messagesSeenMessage::InternalSwap(messagesSeenMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(messagesSeenMessage, _impl_.firstmessageidx_)
      + sizeof(messagesSeenMessage::_impl_.firstmessageidx_)
      - PROTOBUF_FIELD_OFFSET(messagesSeenMessage, _impl_.messagesseen_)>(
          reinterpret_cast<char*>(&_impl_.messagesseen_),
          reinterpret_cast<char*>(&other->_impl_.messagesseen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata messagesSeenMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[15]);
}

// ===================================================================

class newMessageReply::_Internal {
 public:
};

newMessageReply::newMessageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chatservice.newMessageReply)
}
newMessageReply::newMessageReply(const newMessageReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  newMessageReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.received_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.received_ = from._impl_.received_;
  // @@protoc_insertion_point(copy_constructor:chatservice.newMessageReply)
}

inline void newMessageReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.received_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

newMessageReply::~newMessageReply() {
  // @@protoc_insertion_point(destructor:chatservice.newMessageReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void newMessageReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void newMessageReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void newMessageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:chatservice.newMessageReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.received_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* newMessageReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* newMessageReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chatservice.newMessageReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool received = 1;
  if (this->_internal_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_received(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chatservice.newMessageReply)
  return target;
}

size_t newMessageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatservice.newMessageReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool received = 1;
  if (this->_internal_received() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData newMessageReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    newMessageReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*newMessageReply::GetClassData() const { return &_class_data_; }


void newMessageReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<newMessageReply*>(&to_msg);
  auto& from = static_cast<const newMessageReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chatservice.newMessageReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_received() != 0) {
    _this->_internal_set_received(from._internal_received());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void newMessageReply::CopyFrom(const newMessageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatservice.newMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool newMessageReply::IsInitialized() const {
  return true;
}

void newMessageReply::InternalSwap(newMessageReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.received_, other->_impl_.received_);
}

::PROTOBUF_NAMESPACE_ID::Metadata newMessageReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chatService_2eproto_getter, &descriptor_table_chatService_2eproto_once,
      file_level_metadata_chatService_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chatservice
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chatservice::createAccountMessage*
Arena::CreateMaybeMessage< ::chatservice::createAccountMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::createAccountMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::createAccountReply*
Arena::CreateMaybeMessage< ::chatservice::createAccountReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::createAccountReply >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::loginMessage*
Arena::CreateMaybeMessage< ::chatservice::loginMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::loginMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::loginReply*
Arena::CreateMaybeMessage< ::chatservice::loginReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::loginReply >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::logoutMessage*
Arena::CreateMaybeMessage< ::chatservice::logoutMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::logoutMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::logoutReply*
Arena::CreateMaybeMessage< ::chatservice::logoutReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::logoutReply >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::queryUsersMessage*
Arena::CreateMaybeMessage< ::chatservice::queryUsersMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::queryUsersMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::user*
Arena::CreateMaybeMessage< ::chatservice::user >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::user >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::sendMessageReply*
Arena::CreateMaybeMessage< ::chatservice::sendMessageReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::sendMessageReply >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::queryNotificationsMessage*
Arena::CreateMaybeMessage< ::chatservice::queryNotificationsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::queryNotificationsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::notification*
Arena::CreateMaybeMessage< ::chatservice::notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::notification >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::queryMessagesMessage*
Arena::CreateMaybeMessage< ::chatservice::queryMessagesMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::queryMessagesMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::chatMessage*
Arena::CreateMaybeMessage< ::chatservice::chatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::chatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::deleteAccountMessage*
Arena::CreateMaybeMessage< ::chatservice::deleteAccountMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::deleteAccountMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::deleteAccountReply*
Arena::CreateMaybeMessage< ::chatservice::deleteAccountReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::deleteAccountReply >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::messagesSeenMessage*
Arena::CreateMaybeMessage< ::chatservice::messagesSeenMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::messagesSeenMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chatservice::newMessageReply*
Arena::CreateMaybeMessage< ::chatservice::newMessageReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chatservice::newMessageReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
